/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)
    kotlin("plugin.serialization") version "1.9.22"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

application {
    mainClass.set(project.findProperty("mainClass") as? String ?: "com.example.AppKt")
}

dependencies {

    // Command line argument parsing
    implementation("com.github.ajalt.clikt:clikt-jvm:3.3.0")

    // Graphs
    implementation("org.jgrapht:jgrapht-core:1.5.1")

    // CPLEX
    val cplexJarPath: String by project
//    val cplexJarPath = "/Users/kaarthik/Applications/CPLEX_Studio2211/cplex/lib/cplex.jar"
    implementation(files(cplexJarPath))

    // JSON serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")

    // --- Logging ---
    implementation("io.github.oshai:kotlin-logging-jvm:6.0.3")
    implementation("org.slf4j:slf4j-simple:2.0.3")

    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0")
    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.4")

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("fairTA.main.AppKt")
}

tasks {
    register<Delete>("cleanLogs") {
        // Remove all generated files and folders.
        fileTree("logs").visit {
            if (file.name != ".gitkeep")
                project.delete(file)
        }
    }

    val cplexLibPath: String by project
    val args = listOf(
        "-Xms32m",
        "-Xmx22g",
        "-Djava.library.path=$cplexLibPath"
    )

    withType<JavaExec> {
        jvmArgs = args
    }

    // Use JUnit Platform for unit tests.
    test {
        useJUnitPlatform()
    }
}

tasks {
    register<Jar>("uberJar") {
        archiveFileName.set("uber.jar")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest {
            attributes("Main-Class" to "fairMTSP.main.AppKt")
        }

        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourceSets.main.get().output)

        dependsOn(configurations.runtimeClasspath)
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
    }
}
